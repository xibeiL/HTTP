


1	GET	请求指定的页面信息，并返回实体主体。

2	HEAD	类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头

3	POST	向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。

4	PUT	从客户端向服务器传送的数据取代指定的文档的内容。

5	DELETE	请求服务器删除指定的页面。

6	CONNECT	HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。

7	OPTIONS	允许客户端查看服务器的性能。

8	TRACE	回显服务器收到的请求，主要用于测试或诊断。

9	PATCH	是对 PUT 方法的补充，用来对已知资源进行局部更新 。



具有幂等性的方法：GET,PUT,DELETE

幂等性：HTTP幂等方法，是指无论调用这个url多少次，都不会有不同的结果的HTTP方法。也就是不管你调用1次还是调用100次，1000次，结果都是一样的
       （前提是服务器端的数据没有被人为手动更改。比如说，你数据库中的数据被手动更改过，那两次调用的结果肯定是变化的）。

HTTP GET方法，用于获取资源，不管调用多少次接口，结果都不会改变，所以是幂等的。
             幂等性指的是作用于结果而非资源本身。怎么理解呢？例如，这个HTTP GET方法可能会每次得到不同的返回内容，但并不影响资源。
             可能你会问有这种情况么？当然有咯。例如，我们有一个接口获取当前时间，我们就应该设计成GET /service_time # 获取服务器当前时间
             它本身不会对资源本身产生影响，因此满足幂等性。
             
HTTP POST方法，是一个非幂等方法，因为调用多次，都将产生新的资源
             POST /tickets # 新建一个ticket，因为它会对资源本身产生影响，每次调用都会有新的资源产生，因此不满足幂等性。
             
HTTP PUT方法，是一个幂等方法
             PUT /tickets/12 # 更新ticket 12
             因为它直接把实体部分的数据替换到服务器的资源，我们多次调用它，只会产生一次影响，但是有相同结果的 HTTP 方法，所以满足幂等性。

HTTP PATCH方法，是非幂等的。HTTP POST方法和HTTP PUT方法可能比较好理解，但是HTTP PATCH方法只是更新部分资源
               因为，PATCH提供的实体则需要根据程序或其它协议的定义，解析后在服务器上执行，以此来修改服务器上的资源。
               换句话说，PATCH请求是会执行某个程序的，如果重复提交，程序可能执行多次，对服务器上的资源就可能造成额外的影响，
               这就可以解释它为什么是非幂等的了。
               举个例子 PATCH /tickets/12 # 更新ticket 12
               此时，我们服务端对方法的处理是，当调用一次方法，更新部分字段，将这条ticket记录的操作记录加一，这次，
               每次调用的资源是不是变了呢，所以它是有可能是非幂等的操作。
               
HTTP DELETE方法，HTTP DELETE方法用于删除资源，会将资源删除。
               DELETE /tickets/12 # 删除ticekt 12
               调用一次和多次对资源产生影响是相同的，所以也满足幂等性。





       
 
