GET与POST的差别

（1）post更安全（不会作为url的一部分，不会被缓存、保存在服务器日志、以及浏览器浏览记录中） 
（2）post发送的数据更大（get有url长度限制） 
（3）post能发送更多的数据类型（get只能发送ASCII字符） 
（4）post比get慢 
（5）post用于修改和写入数据，get一般用于搜索排序和筛选之类的操作（淘宝，支付宝的搜索查询都是get提交），目的是资源的获取，读取数据 


使用场景：
对于信息的获取一般使用get,在以下情况下最好使用post请求:
向服务器发送大量数据（因为post没有发送数据的数量限制） 
无法使用缓存文件（会更新服务器上的文件）
发送包含未知字符的用户输入时(亲身经历过GET的坑,泪目) 


GET方式需要使用Request.QueryString来取得变量的值，
而POST方式通过Request.Form来获取变量的值，也就是说Get是通过地址栏来传值，而Post是通过提交表单来传值。

GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同
GET产生一个TCP数据包；POST产生两个TCP数据包。
对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；
而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。
因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。
但这是一个坑！跳入需谨慎。为什么？
1. GET与POST都有自己的语义，不能随便混用。
2. 据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。
   而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。
3. 并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。


GET请求的最大长度注意：

（1）http协议并未规定get和post的长度限制 
（2）get的最大长度限制是因为浏览器和web服务器限制了URL的长度 
（3）不同的浏览器和web服务器，限制的最大长度不一样 
（4）要支持IE，则最大长度为2083byte，若支持Chrome，则最大长度8182byte



为什么get比post更快？
1.post请求包含更多的请求头 
因为post需要在请求的body部分包含数据，所以会多了几个数据描述部分的首部字段（如：content-type）,这其实是微乎其微的。
2.post在真正接收数据之前会先将请求头发送给服务器进行确认，然后才真正发送数据 
post请求的过程： 
（1）浏览器请求tcp连接（第一次握手） 
（2）服务器答应进行tcp连接（第二次握手） 
（3）浏览器确认，并发送post请求头（第三次握手，这个报文比较小，所以http会在此时进行第一次数据发送） 
（4）服务器返回100 Continue响应 
（5）浏览器发送数据 
（6）服务器返回200 OK响应 
get请求的过程： 
（1）浏览器请求tcp连接（第一次握手） 
（2）服务器答应进行tcp连接（第二次握手） 
（3）浏览器确认，并发送get请求头和数据（第三次握手，这个报文比较小，所以http会在此时进行第一次数据发送） 
（4）服务器返回200 OK响应 
也就是说，目测get的总耗是post的2/3左右，这个口说无凭，网上已经有网友进行过测试。
3.get会将数据缓存起来，而post不会 
  采用get方式请求静态数据（比如html页面，图片）的时候，如果两次传输的数据相同，第二次以后消耗的时间将会在10ms以内（chrome测试），
   而post每次消耗的时间都差不多。
4.post不能进行管道化传输 
管道通信的方式进行速度优化：把需要发送到服务器上的所有请求放到输出队列中，在第一个请求发送出去后，不等到收到服务器的应答，第二个请求紧接着就发送出去，
但是这样的方式有一个问题：不安全，如果一个管道中有10个连接，在发送出9个后，突然服务器告诉你，连接关闭了，
此时客户端即使收到了前9个请求的答复，也会将这9个请求的内容清空，也就是说，白忙活了……此时，客户端的这9个请求需要重新发送。
这对于幂等请求还好（比如get，多发送几次都没关系，每次都是相同的结果），
如果是post这样的非幂等请求（比如支付的时候，多发送几次就惨了），肯定是行不通的。 
所以，post请求不能通过管道的方式进行通信！很有可能，post请求需要重新建立连接，
这个过程不跟完全没优化的时候一样了么？所以，在可以使用get请求通信的时候，
不要使用post请求，这样用户体验会更好，当然，如果有安全性要求的话，post会更好。
管道化传输在浏览器端的实现还需考证，貌似默认情况下大部分浏览器（除了opera）是不进行管道化传输的，除非手动开启！



